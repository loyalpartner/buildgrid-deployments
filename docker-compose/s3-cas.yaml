##
# BuildGrid's Docker Compose manifest.
#
#   Â¡FOR LOCAL DEVELOPMENT/DEMONSTRATION ONLY!
#
# Spins-up a 'local' grid instance, with all services exposed using an
# nginx proxy at http://localhost:50051/. This deployment uses Minio to
# demonstrate a CAS backed with S3, with cleanup/expiry enabled. In this
# example, the PostgreSQL database is also used to store an index of the
# CAS contents, to improve performance of requests like FindMissingBlobs,
# and record blob access time to support LRU-based cleanup.
#
# The publically available configured gRPC services are:
#  - Execution
#  - Operations
#  - CAS
#  - ActionCache
#
# This compose file also spins up internal containers for the following:
#  - PostgreSQL
#  - Minio (providing an S3-compatible storage backend)
#  - RWAPI Bots interface
#  - RWAPI bots using `bgd bot`
#  - `bgd cleanup` to limit the storage usage of the CAS
#  - nginx
#
# Basic usage:
#  - docker-compose -f s3-cas.yaml up --scale bots=10
#  - docker-compose down
#
# The following services are also scalable, with larger scale deployments
# able to handle larger numbers of concurrent connections:
#  - Execution/Operations: e.g. `--scale controller=3`
#  - Bots interface: e.g. `--scale bots-interface=3`
#  - CAS: e.g. `--scale storage=3`
#
# For scalable ActionCache take a look at `redis-backed.yml`.
#
version: "3.4"

services:
  database:
    image: postgres:latest
    environment:
      POSTGRES_USER: bgd
      POSTGRES_PASSWORD: insecure
      POSTGRES_DB: bgd
    volumes:
      - type: volume
        source: db
        target: /var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "5432:5432"

  minio:
    image: minio/minio:latest
    entrypoint: /bin/sh -c
    command: [
      "mkdir -p /data/buildgrid && \
       minio server /data"
    ]
    volumes:
      - type: volume
        source: s3
        target: /data
    ports:
      - "9000:9000"
    networks:
      - backend

  storage:  # To be scaled horizontally
    image: registry.gitlab.com/buildgrid/buildgrid/buildgrid:18abc8f6
    command: [
      "server", "start", "-vv",
      "/app/config/s3-indexed-cas.yaml"]
    volumes:
      - type: bind
        source: ./data/config/s3-indexed-cas.yaml
        target: /app/config/s3-indexed-cas.yaml
    expose:
      - 50052
    networks:
      - backend

  cache:
    image: registry.gitlab.com/buildgrid/buildgrid/buildgrid:18abc8f6
    command: [
      "server", "start", "-vvv",
      "/app/config/cache.yaml"]
    volumes:
      - type: bind
        source: ./data/config/cache.yaml
        target: /app/config/cache.yaml
    ports:
      - "50053:50053"
    networks:
      - backend

  controller:  # To be scaled horizontally
    image: registry.gitlab.com/buildgrid/buildgrid/buildgrid:18abc8f6
    command: [
      "server", "start", "-vvv",
      "/app/config/controller.yaml"]
    volumes:
      - type: bind
        source: ./data/config/controller.yaml
        target: /app/config/controller.yaml
    expose:
      - 50051
    depends_on:
      - database
    networks:
      - backend

  bots-interface:  # To be scaled horizontally
    image: registry.gitlab.com/buildgrid/buildgrid/buildgrid:18abc8f6
    command: [
      "server", "start", "-vvv",
      "/app/config/bots-interface.yaml"]
    volumes:
      - type: bind
        source: ./data/config/bots-interface.yaml
        target: /app/config/bots-interface.yaml
    expose:
      - 50054
    depends_on:
      - database
    networks:
      - backend

  bots:  # To be scaled horizontally
    image: registry.gitlab.com/buildgrid/buildgrid.hub.docker.com/buildbox:local
    privileged: true
    environment:
      BUILDGRID_SERVER_URL: http://bots-interface:50054
      CAS_SERVER_URL: http://storage:50052
      RUNNER_BINARY: buildbox-run-hosttools
    depends_on:
      - controller
    networks:
      - backend
    restart: always

  # The cleanup container handles cleaning up old blobs from the CAS, deleting
  # them from both the S3 bucket and the SQL index.
  cleanup:
    image: registry.gitlab.com/buildgrid/buildgrid/buildgrid:18abc8f6
    # The high and low watermarks can be reduced for easier testing of
    # cleanup in particular, but having them too low will make it difficult
    # to run real work.
    command: [
      "cleanup", "start", "-vv", "--high-watermark", "2G",
      "--low-watermark", "1G", "--batch-size", "100M", "--sleep-interval",
      "10", "/app/config/s3-indexed-cas.yaml"
    ]
    volumes:
      - type: bind
        source: ./data/config/s3-indexed-cas.yaml
        target: /app/config/s3-indexed-cas.yaml
    depends_on:
      - minio
      - database
      - storage
    networks:
      - backend

  # We use nginx here to provide a proxy through to the various services.
  # This allows independent horizontal scaling of the services whilst
  # still providing a single endpoint for clients to connect to.
  nginx:
    image: nginx:latest
    volumes:
      - ./data/config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - controller
      - storage
      - cache
    ports:
      - "50051:50051"
    networks:
      - backend
      - host

networks:
  backend:
  host:

volumes:
  db:
    name: bgd-s3-database
  s3:
    name: bgd-s3-data
